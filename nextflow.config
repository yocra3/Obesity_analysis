/*
 * Default config options for all pipelines
 */

// Global default params, used in configs
params {

  // General params
  outdir = './results'
  max_memory = 128.GB
  max_cpus = 16
  max_time = 240.h

  // imputeData
  HRCref = "/home/SHARED/DATA/REFERENCES/ImputationPanels/HRC.r1-1.GRCh37.wgs.mac5.sites.tab"

  // postImputationQC
  sample_excel = "data/Obesity.SamplesSummary.xlsx"
  obesity1Extra = "data/Obesity1.extra.samps"
  flat_gene = "/home/SHARED/DATA/REFERENCES/GRCh37/GenesAnnotation/refFlat_hg19.txt.gz"

  // associations
  snps_1000G = "/home/SHARED/DATA/REFERENCES/GRCh37/SNP_annotation/All_20180418.vcf.gz"
  depictFold = "/home/SHARED/SOFTWARE/depict/"

  // imputeData_VLF
  chain = "/home/SHARED/DATA/REFERENCES/GRCh37/hg18ToHg19.over.chain.gz"
  liftover = "/home/SHARED/SOFTWARE/liftOver"
  ref1000g = "/home/SHARED/DATA/REFERENCES/ImputationPanels/1000GP_Phase3_combined.legend"

  // associations
  ld_folder = "/home/SHARED/PROJECTS/Obesity_analysis/data/ld-ref/"
  map_file = "data/mapLDref.tsv.gz"


}

// Container slug. Stable releases should specify release tag!
process.container = 'yocra3/obesity_analysis:1.6'

profiles {
  docker {
    docker.enabled = true
    docker.runOptions = '-u \$(id -u):\$(id -g)'
  }
  singularity {
    singularity.enabled = true
    singularity.autoMounts = true
  }
}

process {

  // Defaults for all processes
  cpus = { check_max( 1 * task.attempt, 'cpus' ) }
  memory = { check_max( 7.GB * task.attempt, 'memory' ) }
  time = { check_max( 4.h * task.attempt, 'time' ) }

// Process-specific resource requirements
 withLabel:process_low {
   cpus = { check_max( 2 * task.attempt, 'cpus' ) }
   memory = { check_max( 14.GB * task.attempt, 'memory' ) }
   time = { check_max( 6.h * task.attempt, 'time' ) }
 }
 withLabel:process_medium {
   cpus = { check_max( 6 * task.attempt, 'cpus' ) }
   memory = { check_max( 42.GB * task.attempt, 'memory' ) }
   time = { check_max( 8.h * task.attempt, 'time' ) }
 }
 withLabel:process_high {
   cpus = { check_max( 12 * task.attempt, 'cpus' ) }
   memory = { check_max( 55.GB * task.attempt, 'memory' ) }
   time = { check_max( 10.h * task.attempt, 'time' ) }
 }
 withLabel:process_long {
   time = { check_max( 5.d * task.attempt, 'time' ) }
 }

}


// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
